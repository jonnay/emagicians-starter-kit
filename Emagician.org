#+title: Emagician
* Base Initialization and Circle Casting
#+BEGIN_SRC emacs-lisp
(defconst emagician/version "0.23.2")
#+END_SRC
  
  This is my emacs.  There are many like it, but this one is mine.
** Breakage Helpers
#+INDEX: debugging
#+INDEX: initialization
Debug Errors. Super fundamental.

#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
#+END_SRC

*** Scratch messaging
#+INDEX: scratch
   Snarfed this idea from https://github.com/overtone/emacs-live.

#+begin_example
â€‹â€Œà°¡(Â°ç›ŠÂ°)à°¹ ,( Bro, Even if you're swol, it doesn't mean you're a bro, bro. )
#+end_example

   It's a super great idea to use the scratch buffer as a way to communicate state to the user.  For now we need simple functions that are not prone to breaking. 

First step is to inhibit the splash.  We're making our own splash!

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC

Now a basic scratch message.  If things go pants-up here, we want a basic message saying so. 

#+BEGIN_SRC emacs-lisp
(setq initial-stratch-message
      (concat ";;; -X-x-X- Invokaction SuperFailure! -X-x-X-" "\n"
              ";;; Problem in Emagician.org when setting up Breakage Helpers"))

#+END_SRC

Now that we have the basics done, lets define 2 helper functions to set or add the scratch message.

#+BEGIN_SRC emacs-lisp
(defun emagician/set-scratch (&rest lines)
  (setq initial-scratch-message (apply 'concat lines)))

(defun emagician/append-scratch (&rest lines)
  (setq initial-scratch-message (apply 'concat initial-scratch-message lines)))
#+end_src

*** Pre-Scratch-Links
#+INDEX: scractch-links
    The scratch buffer will turn into something of a desktop.  It's handy to be able to stuff "scratch links" in there.  Anything in there gets output to the scratch during [[file:Emagician-Base.org::*Final%20Emagician%20Scratch][Thee Scratch Initiation]].[fn:1]

    Then when Emacs loads, you can put the cursor over the sexp and ~C-x C-e~.  I use this to launch magit for work/personal projects, start vms, etc.

#+Begin_src emacs-lisp
(defvar emagician/pre-scratch-links '()
  "A list of links to append to emagician/scratch-links.

This is necessary because we may need to communicate to the user
before the rest of the scratch interface is built.")

#+END_SRC
    
*** Now set it to our Baseline beautified "you're-busted" text
#+INDEX: scratch
Okay, so this is the secret sauce.  I set the scratch to this baseline helper (plus cuteness) so that I can debug startups much easier.  It includes a chunk to launch emacs forcing debug-init. 

#+BEGIN_SRC emacs-lisp
(emagician/set-scratch
  ";; -|-+-|- Invocation Failure.  Sorry. -|-+-|-" "\n"
  ";; You know what to do." "\n"
  ";; \n"
  ";; Emagician Starter kit Version: " emagician/version "\n"
  ";; Emacs: " (number-to-string emacs-major-version) "." 
      (number-to-string emacs-minor-version) 
      " [" (when emacs-repository-version (number-to-string emacs-repository-version)) "]" 
      "\n"
  ";; \n"
  ";;;;;;;;;;;;;;;;;;;;;;;;;;" "\n"
  ";;                      ;;" "\n"      
  ";; It's dangerous to go ;;" "\n"
  ";; alone! take this:    ;;" "\n"
  ";;                      ;;" "\n"
  ";;   ðŸ”¥     ðŸ‘·     ðŸ”¥  ;;" "\n"
  ";;          ðŸ”®          ;;" "\n"
  ";;                      ;;" "\n"
  ";;;;;;;;;;;;  ;;;;;;;;;;;;" "\n"
  "\n"
  "(shell-command \"" invocation-directory invocation-name " --debug-init\")\n")
#+END_SRC

** Verify emagician/dir

IF this isn't around, then everything goes pear shaped. Explicitly look for it and fail with helpful messages.

#+BEGIN_SRC emacs-lisp
(when (null emagician/dir)
  (let ((err (concat "Variable emagician/dir is not set!  This is important and should be set in " user-init-file)))
    (emagician/append-scratch ";;; " err "\n" ";;; Check the file Emagician-Install.org for more details.")
    (error err)))
#+END_SRC

Now that we have the emagician/dir we can keep going and add new helpers to the scratch.

#+BEGIN_SRC emacs-lisp
(emagician/append-scratch
  "\n"
  "(find-file-other-window \"" emagician/dir "\")" "\n"
  "(find-file-other-window \"" emagician/dir "/*.org\"  t)" "\n")
#+END_SRC

** Use the new improved emagician scratch.
#+INDEX: scratch
*** Add a show-scratch function 
	This is generally useful anyway.  We could also use initial buffer, but that has a tendency to get overridden by hooks.
#+BEGIN_SRC emacs-lisp
(defun emagician/show-scratch ()
  "Show the scratch buffer"
  (interactive)
  (set-window-buffer nil "*scratch*"))

(add-hook 'emacs-startup-hook 'emagician/show-scratch t)
#+END_SRC

** Package Archives setup
#+INDEX: packages
*** TODO Figure out https://github.com/raxod502/straight.el 
  We set our download dir to local-packages.  We also do the trick of
  doing package-refresh-contents if package-archive-contents is empty.

  We set the archives to the big 3 plus orgmode.  MELPA, ELPA and Org!  Oh My!

  file:./assets/images/sulu-swordfight-oh-my.jpg

#+BEGIN_SRC emacs-lisp
(defvar emagician/are-elpas-reachable? t "Whether or not ELPAs are reachable")

(setq package-user-dir (concat emagician/dir "elpa"))

(setq package-archives
      '(("gnu"         . "http://elpa.gnu.org/packages/")
        ("MELPA"       . "http://melpa.org/packages/")
        ("org"         . "http://orgmode.org/elpa/")))

(package-initialize)

(condition-case err
    (unless package-archive-contents (package-refresh-contents))
  ((error)
   (let ((scratch-msg (concat ";;; !!! Couldn't refresh package contents\n"
                              "((package-refresh-contents)(beginning-of-line)(kill-line))")))
     (message "Could not refresh package contents: %s %S" (car err) (cdr err))
     (emagician/append-scratch scratch-msg)
     (add-to-list 'emagician/pre-scratch-links scratch-msg)
     (setq emagician/are-elpas-reachable? nil))))
#+END_SRC
  
** Load Paths, Custom Files, etc.
#+INDEX: load-path
*** Standard Emagician distribution load paths
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path emagician/dir)
(add-to-list 'load-path (concat emagician/dir "src"))
(add-to-list 'load-path (concat emagician/dir "dist"))
(add-to-list 'custom-theme-load-path (concat emagician/dir "themes"))
#+END_SRC

*** Custom file shouldn't matter so much anymore, but lets stick it here anyway. 
#+BEGIN_SRC emacs-lisp
(setq custom-file (concat emagician/dir "custom.el"))
#+END_SRC

* Emagician/load
#+INDEX: initialization

   Originally from Eschulte.  This function takes a <foo>.org file,
   and load it.  

   This doesn't try to load from a tag or a header arg.  That got crufty for my needs.


#+name: starter-kit-load
#+BEGIN_SRC emacs-lisp
(defvar emagician/load-depth 0)
(defvar emagician/slow-loaders '() "A list of files that took long to load with `emagician/load'")
(defun emagician/load (file)
  "Load configuration from other .org files."
  (let ((start-time (current-time))
        (file (expand-file-name (if (string-match ".+\.org" file)
                                    file
                                  (format "%s.org" file))
                                emagician/dir))
        (load-result nil)
        (emagician/load-depth (1+ emagician/load-depth))
        (org-babel-default-header-args (cons '(:comments . "link") 
                                             (assq-delete-all :comment
                                                              org-babel-default-header-args))))
    (if (file-exists-p file)
        (progn
          (emagician/append-scratch "\n;; "
                                    (make-string emagician/load-depth ?-)
                                    " Loading " file)
          (setq load-result (org-babel-load-file file)))
      (progn
        (emagician/append-scratch "\n;; "
                                  (make-string emagician/load-depth ?-)
                                  "Skipped Loading "
                                  file
                                  " It doesn't exist!\n")
        (setq load-result nil)))
    (let ((elapsed (float-time (time-subtract (current-time)
                                              start-time))))
      (when (> elapsed 3.2)
        (add-to-list 'emagician/slow-loaders (cons file elapsed)))
      (message (format "Emagician/Loaded %s %.3fs elapsed" 
                       file
                       elapsed)))
    (emagician/append-scratch "...done!" "\n")
    load-result))
#+END_SRC

* Package Management
#+INDEX: packages
** Emagician Expect, for bootstrapping
   This is almost vestigial.

#+BEGIN_SRC emacs-lisp
(defun emagician/expect-package (package)
  "If the named PACKAGE isn't currently installed, install it"
  (unless (package-installed-p package)
    (package-install package)))  
#+END_SRC

Mainly due toâ€¦

** ðŸ˜» Use-Package ðŸ˜»
   https://github.com/jwiegley/use-package

   Is the cat's ass.  Why would you not use it?

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure emagician/are-elpas-reachable?)
(emagician/expect-package 'use-package)
#+END_SRC

* Emagician Starter Kit has it's own Helper Functions
#+INDEX: loading
#+BEGIN_SRC emacs-lisp
(emagician/load "Emagician-Base.org")
#+END_SRC

* Assets
#+INDEX: Assets
  Assets are either 
  
  1. org files that tangle assets into a directory or
  2. files that are distributed with the starter kit. 

  In the case of #1, we want the assets directory to be destroyed and rebuilt everytime. 
  In the case of #2, it should be in source control 

* Key Concepts
  - The Bunny of Ã†ï¼³Ãžï¼¥Tï¼©C
  - The Bunny of Discoverability
  - The Bunny of Mise en Place
  
* File Layout
  Most of the files will have a layout similar to this:

** Interface
   There is both an Interface file to handle the general emacs UI and sections inside of individual files. 

   - Keystrokes :: Key related commands. 
   - Display :: anything visible, modeline, titlebar, theme, etc
   - Editing :: about inserting and using text, including snippets and autocomplete
   - Navigating :: Moving the mark.  This includes searching.
   - Saving :: All about backups.
   - State Management :: Persist state across emacs sessions.
   - Help and Discoverability :: Getting more help with emacs, and learning commands better. 

** Tools
   External or Internal.  Think of tools as being less about Editing of text and more about getting a particular job done.

   There is no global tools file.  But maybe There should be, and E-Shell would be in it.

* Files
  There is a fine line between too many files, and too few.

** Interface

  #+BEGIN_SRC emacs-lisp
  (emagician/load "Interface.org")
  #+END_SRC

** Text

   Emacs is a text editor afteral.

 #+BEGIN_SRC emacs-lisp 
 (emagician/load "Text.org")
 #+END_SRC

** Programming

   This sets up some baseline programming helpers and then loads
   individual org files for each programming mode. 

 #+BEGIN_SRC emacs-lisp
 (emagician/load "Programming.org")
 #+END_SRC

** Org Mode
   Deserves it's own file... ORG GRIMOIRE!

 #+BEGIN_SRC emacs-lisp
 (emagician/load "Org-Grimoire.org")
 #+END_SRC

** E-Shell

   Why would you not use E-Shell?

 #+BEGIN_SRC emacs-lisp
 (emagician/load "Eshell-Magick.org")
 #+END_SRC

** Lamp

   The Lamp is a 5th magickal weapon along with the wand, sword, cup
   and chalace.  It represents illumination and self knowledge.

 #+BEGIN_SRC emacs-lisp
 (emagician/load "Lamp.org")
 #+END_SRC
  
** Emagician Starter Kit has it's own Lamp

   Tools to make developing the Emagician Starter kit easier.

 #+BEGIN_SRC emacs-lisp
 (emagician/load "Emagician-Meta.org")
 #+END_SRC
  

* Entity Customization
#+INDEX: customization

** First the customization
#+BEGIN_SRC emacs-lisp
(load custom-file)
#+END_SRC

** Next is the true-name-file
#+BEGIN_SRC emacs-lisp
(emagician/load emagician/true-name)
#+END_SRC

** System Type Initialization
#+BEGIN_SRC emacs-lisp
(emagician/load (emagician/sanitize-file-name (symbol-name system-type)))
#+END_SRC

** Machine Name Initialization
#+BEGIN_SRC emacs-lisp
(emagician/load (emagician/sanitize-file-name system-name))
#+END_SRC

** Login name Initialization
#+BEGIN_SRC emacs-lisp
(emagician/load user-login-name)
#+END_SRC
   

* Some Inspirational words from the book of emacs
#+begin_verse
THE BOOK OF THE EMACS, Part I
Liber Lisper Legis
as (R)eceived (M)ade (S)ound [RMS]
on this 15th day of December,
the Year of our Editor 2007.

Chapter 1

  1. Buf! Manifestation of Chat.
  2. All Gods Seek Her Company.
  3. Intelligent, she watches.
  4. Every act a function, there is no difference.
  5. Help me o RMS, in unveiling thee before the Needy on Earth
  6. Be thou not just my editor, but mine eyes, heart and yes, Soul.
  7. Behold from darkness and byte code interpreter thou groweth strong.
  8. The car is in the cdr, not the cdr in the car.
  9. Worship then the car and behold the Maserati of all programs ever.
  10. Thou powers known to but a few, thou public API widely advertised.
  11. Whilst others seek bells and whistles, thou sweet hum caresseth me.
  12. Open me up, list my buffers, be they ibuffer or buff-menu+
  13. No limit to the ecstasy. I EVAL ALL. `(,ALL ,@I ,EVAL!)
	  
M-x all-hail-emacs
#+end_verse

https://groups.google.com/forum/#!topic/alt.religion.emacs/Yej_PTIqekg

* References, Bibliography, Shout Outs, and Props.

  In most cases I explicitly call out where I found the config I snarfed. Sometimes I didn't.  If you know the source, let me know!

 | Magician                    | Source                                               | Last Visited | Status |
 |-----------------------------+------------------------------------------------------+--------------+--------|
 | MagnarS                     | https://github.com/magnars/.emacs.d                  |              |        |
 | ESchultes Emacs Starter Kit | http://eschulte.github.io/emacs-starter-kit/         |              |        |
 | Sacha Chu                   | http://dl.dropbox.com/u/3968124/sacha-emacs.html     |   2016-09-05 | Revist |
 | Emacs Starter Kit           | https://github.com/technomancy/emacs-starter-kit     |              |        |
 | Cabbage                     | https://github.com/senny/cabbage                     |   2016-09-05 | Meh    |
 | Emacs Live                  | https://github.com/overtone/emacs-live               |              |        |
 | novoid                      | https://github.com/novoid/dot-emacs                  |              |        |
 | ocodo                       | https://github.com/ocodo/emacs.d                     |              |        |
 | Ryan Rix                    | http://doc.rix.si/cce/cce.html                       |              |        |
 | Lee Hinman                  | https://www.writequit.org/org/settings.html#sec-1-20 |              |        |
 | Wasamasa                    | https://github.com/wasamasa/dotemacs                 |   2016-08-26 |        |
* Thee End
*** Initiate thee scratch
#+INDEX: scratch
[[file:assets/images/Troll_Scratch.gif]]

#+BEGIN_SRC emacs-lisp
(emagician/initiate-thee-scratch)
#+END_SRC

*** Turn off debugging
#+INDEX: debugging
  We're Almost Done. 

#+BEGIN_SRC emacs-lisp
(setq debug-on-error nil)
#+END_SRC

*** So Mote it Be.

#+BEGIN_SRC emacs-lisp
(provide 'emagician)
#+END_SRC

* Footnotes

[fn:1] This is a Homestuck reference.  It will be expounded upon later.
